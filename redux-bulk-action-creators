FOLLOWING RESTFUL CONVENTIONS INSIDE APPLICATION

        ACTION        |       METHOD        |      ROUTE       |      RESPONSE
  ____________________|_____________________|__________________|____________________
      Records List    |         GET         |     /records     | Array of records
    Specific record   |         GET         |   /records/:id   | Single record
      Create record   |        POST         |     /records     | Single record
      Update record   |         PUT         |   /records/:id   | Single record
      Delete record   |       DELETE        |   /streams/:id   | Nothing

-The response is what the API Server returns when a request is made to it
-If RESTful convention is truly being followed, the response is pretty predictable
-Although there isn't a Component to show a list of records, edit a record, delete a record, then all Action
 Creators can be created altogether, when RESTful convention is followed

 eg: creating stream/list of streams/getting 1 stream/editing a stream/deleting a stream

-Eventually wire these up to their respective components when those are programmed
-In general this may work out


Step ONE:
-Create all action types
  eg: actions/types.js
export const CREATE_STREAM = 'CREATE_STREAM';
export const FETCH_STREAMS = 'FETCH_STREAMS';
export const FETCH_STREAM = 'FETCH_STREAM';
export const DELETE_STREAM = 'DELETE_STREAM';
export const EDIT_STREAM = 'EDIT_STREAM';


Step TWO:
-Import all the action types
  eg: actions/index.js
  //import statements
  import {
    SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, DELETE_STREAM, EDIT_STREAM
  } from './types';


Step THREE:
-Create an Action Creator for the respective action type
-Arrow function that returns a thunk function
-Inside, follow the REST convention


  eg: FETCH_STREAMS(ALL), actions/index.js
  export const fetchStreams = () => {
    return async dispatch => {
      const response = await streams.get('/streams')

      dispatch({ type: FETCH_STREAMS, payload: response.data })
    }
  }


  eg: FETCH_STREAM(SINGLE w/ ID), actions/index.js
  export const fetchStream = (id) => {
    return async (dispatch) => {
      const response = await streams.get(`/streams/${id}`)

      dispatch({ type: FETCH_STREAM, payload: response.data })
    }
  }


  eg: EDIT_STREAM(SINGLE UPDATE w/ ID), actions/index.js
  -Action Creator for editing a record is a bit more challenging
  -Any time a record is updated, need to provide both ID and the update to that record as arguments
  -Combine idea of receiving ID from fetchStream WITH passing in formValues from createStream as arguments
  export const editStream = (id, formValues) => {
    return async (dispatch) => {
      const response = await streams.put(`/streams/${id}`, formValues)

      dispatch({ type: EDIT_STREAM, payload: response.data })
    }
  }


  eg: DELETE_STREAM(SINGLE STREAM REMOVAL w/ ID), actions/index.js
  -Action Creator for deleting a record
  -Get nothing back therefore payload property will be different
  -Won't need a response, dispatch won't have a payload of response
  export const deleteStream = (id) => {
    return async (dispatch) => {
      await streams.delete(`/streams/${id}`)

      dispatch({ type: DELETE_STREAM, payload: id })
    }
  }
