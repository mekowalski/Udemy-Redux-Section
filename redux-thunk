REDUX-THUNK: Middleware to help make requests in a Redux application
-Middleware refers to the Redux library
-Functions that slightly change the behavior of Store
-Add in new capabilities/features to Redux side
-Middleware is always used in Redux library(redux-thunk is prominent)


MIDDLEWARES IN REDUX
-Now adventuring into the world of asynchronous action creators
Synchronous Action Creator: Instantly returns an action with data ready to go
Asynchronous Action Creator: Takes some amount of time for it to get its data ready to go
  -Any time an action creator tat makes a network request, it will always qualify as asynchronous action
   creator

-To have asynchronous action creators in Redux, need to install middleware to allow this activity


MIDDLEWARE
-Plain JS function that gets called with every single Action dispatched
-Has the ability to STOP, MODIFY, otherwise mess around with Actions
  eg: create middleware that console logs every Action that is dispatched
-Open Source middleware exist
  -Can access or very easily customize middlewares
-Most popular use of middleware is for dealing with async Actions
-Redux-Thunk will help solve current async issue


REDUX CYCLE(current)
Action Creator  --->  Action  --->  Dispatch  --->  Reducers  --->  State

REDUX CYCLE with REDUX
Action Creator  --->  Action  --->  Dispatch  --->  Middleware  --->  Reducers  --->  State
-When an action is dispatched, instead of sending off to reducers, actions will be sent through all the
 middlewares inside Redux app

-Can have as many or as few middlewares, current app will have 1 or 2


REDUX-THUNK BEHIND THE SCENES
Normal Rules
-Action Creators MUST return objects
-Actions must have a type property
-Actions can optionally have a 'payload'

Rules with Redux-Thunk
-Action Creators MUST return objects
1. Action Creators CAN return Action ojbects
                        OR
2. Action Creators CAN return functions
-If an Action object gets returned, it must have a type
-If an Action object gets returned, it can optionally have a 'payload'


FLOW OF INTERNAL PROCESS OF REDUX-THUNK
a. Action Creator ---> Action(return 'Something') = Object or Function
b. Pass that 'Something' to dispatch() ---> Will send to Middleware
c. 'Something' will be inside Redux-Thunk
d. Action, are you a function or an object
  ---> Object will be passed to the Reducers

***BEGIN FUNCTION CYCLE***
  ---> Function will be invoked with dispatch, passes dispatch & getState functions as arguments
e. Wait for request to finish
f. Request completed ---> Use dispatch() to manually dispatch an Action(entire key part)
g. New Action is created(dispatching manually from redux-thunk or inside that function, it will always be
   a plain object)
***END FUNCTION CYCLE***

h. New Action will flow back to dispatch(step b)
i. New Action is an object that will be inside Redux-Thunk(step c)
j. Redux-Thunk will again evaluate a function or object(step d)
k. Finally will be determined an object and passed on to Reducers


SOURCE CODE
github.com/reduxjs/redux-thunk
-A total of 14 lines comprise redux-thunk
-And about 6 of those lines, do anything
