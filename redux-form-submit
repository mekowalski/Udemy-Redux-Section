HANDLING FORM SUBMISSION
-Common practice of using `event.preventDefault()` to keep the browser from refreshing when form is being
 submitted to a back end server
-Now that RF is being used, there is a bit of different actions

-console.log(this.props) => In browser console, returns a lot of properties, one being handleSubmit
-handleSubmit() is a function that is supposed to be called any time the form is submitted
  eg: StreamCreate Form
  <form obSubmit={this.onSubmit} className='ui form'>

***to onSubmit, usually pass in the onSubmit() CB***


-Now that RF is used, there is a different approach
  eg: StreamCreate Form
  <form onSubmit={this.props.handleSubmit(this.onSubmit)} className='ui form'>

1. onSubmit: name of prop passed to Form
2. this.props.handleSubmit(): CB function provided to component by RF
3. (this.onSubmit): CB function is called with my CB method that was defined inside the component

-Internally, whenever Form is submitted, handleSubmit will now receive that event object and AUTOMATICALLY
 call preventDefault()
-Therefore .preventDefault() doesn't need to be done anymore

-onSubmit also WILL NOT be called with an event object, it will be called with the value existed inside the
 2 Field inputs (something like formProps)
-formProps does not mean that it's some data passed down from the parent component, a better name may be
 formValues
-No longer is an event object being dealt with, because now the value of the form is present
-Event object isn't useful, it mainly was helpful for preventing default

-Now rather than onSubmit() getting useless event object, it will be called with the values out of the Form
-It will now be easy to take the Form values and save them on an API or validate them, etc

-When browser is refreshed, when clicking submit button, the Form will still submit without attributes
-This shouldn't be the case, text inputs should be validated
