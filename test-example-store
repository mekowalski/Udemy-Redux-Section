Now that Action Creators, Actions & Reducers are built, wire them together into a single object name Store
STORE: collection of different Reducers and Action Creators

console.log(Redux) =>
{createStore: ƒ, combineReducers: ƒ, bindActionCreators: ƒ, applyMiddleware: ƒ, compose: ƒ, …}

const { createStore, combineReducers } = Redux

const departments = combineReducers({
  accounting: accounting,
  claimsHistory: claimsHistory,
  policies: policies
})

const store = createStore(departments)

store; //Represents Redux app, contains all the Reducers and all State/Data produced by Reducers

-first create Action to pass to Dispatch
const action = createPolicy('Malind', 30)

-Just like the original Form Receiver, dispatch makes copies and sends to Reducers
-When Action is passed to store.dispatch(), the Action will forward to each Reducer
-Each Reducer function ran and processed that Action(Form)
store.dispatch(action);

-Function that gets entire Company Data Bank
store.getState()
console.log(store.getState()) =>
> {accounting: 130, claimsHistory: Array(0), policies: Array(1)}
  accounting: 130
  >claimsHistory: []
  >policies: ["Malind"]
