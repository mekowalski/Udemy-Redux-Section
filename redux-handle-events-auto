AUTOMATICALLY HANDLING EVENTS
-Field component itself doesn't actually know how show a text input
 (or dropdown, checkbox or any type of form element)

-Need to assign a prop, called component, to Field in order to show actual text on screen
-Either a React component or a function for Field to call
-This component needs to return some element to actually be shown on screen
  eg: <Field name='title' component={} />

***All about hooking up infrastructure of Store to mapStateToProps to Props to Handler to Action Creator
back to Store cycle***

-Lesson to learn:
  1. Redux Form is all about automating the entire process(handling inputs)
  2. EOD, RF doesn't really know a lot about what's being done
    -Doesn't know if a text input it showing, or if a dropdown/checkbox is being shown
    -RF will assume I (developer) is doing the right thing
  3. In order to do the correct 'thing', supposed to return an input element via helper method passed to
    component prop in Field
    eg: helper mehthod
    renderInput() {
      return (
        <input />
      )
    }

    <Field name='title' component={this.renderInput} />

-Anytime an Input Element is shown with React(in any capacity), always show Input Element and assign its
 value property and give it an onChange CB handler
 ***a controlled element***

-To create a controlled element, any time a Field tag calls the helper method, it will pass a number of
 arguments
 eg: renderInput()
 renderInput(formProps) {
   return <input />
 }

RETURN: {input: input, meta} x2
-input > input: familiar event handlers(onChange, onFocus, etc) and value

-RF wires all the input handling
-My job is to make last connection, take onChange handler and wire it to Input Element
-Also my job is to take value Prop and hook it up to Input Element
  eg: hook up to value and handler to Input Element
  renderInput(formProps) {
    return (
      <input
        onChange={formProps.input.onChange}
        value={formProps.input.value}
      />
    )
  }


NEW SYNTAX
eg: renderInput
renderInput(formProps) {
  return <input {...formProps.input} />
}

-Takes formProps input property(an object, value and onChange props), takes key-value pairs and adds them
 as properties to the Input element
 !!!!!!Things are just clicking for me right here!!!!!!


EVEN MORE REFACTORED SYNTAX
-Destructure input argument out of formProps object
eg: renderInput
renderInput({ input }) {
  return <input {...input} />
}

-Any time RF is used, always use a syntax for input element properties, BECAUSE there are always other
 properties inside input object that RF cares about
