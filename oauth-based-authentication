OAuth-Based Authentication with Google OAuth2 Flow

EMAIL/PASSWORD AUTH
1. Store record in database with user's email and password
2. When user tries to login, compare email/password with what's stored in database
3. A user 'logs in' when they enter correct email/password

OAUTH AUTHENTICATION
1. User authenticates with outside service provider(Google, LinkedIn, Twitter)
2. User authorizes the app to access their information
3. Outside provider tells app about the user
4. App decides to trust outside provider to correctly handle user identification
5. OAuth can be used for (1) user ID in app and (2) app making actions on behalf of user

HOW TO USE OAUTH FLOW TO MAKE ACTIONS ON BEHALF OF USER
-Every time a user goes through OAuth Flow the App will ask about a list of 'scopes'
-Scopes can be anything such as: email, profile, browser history, etc
-Scope is also a permission the user grants the application
-Google OAuth Scopes: developers.google.com/identity/protocols/googlescopes


OAUTH FOR SERVERS
1. Results in token that a server can use to make requests on behalf of the user
2. Usually used when an app needs to access user data WHEN USER ISN'T LOGGED IN
  -eg: building an app that accesses a user's email every 15 minutes and attempt to delete SPAM emails
3. Difficult to setup because a lot of user information needs to be stored

OAUTH FOR JS BROWSER APPS
1. Results in token that a browser app can use to make requests on behalf of the user
2. Usually used when an app only needs to access user data WHEN THEY ARE LOGGED IN
3. Very easy to setup thanks to Google's JS library to automate flow

-Both approaches effectively have the same result
-Overall, ask user to provide access to their data via third party provider


FLOW FOR OAUTH
                  User's Browser                                      Google's Servers
                        |                                                     |
        User clicks Login w/ Google button                                    |
                        |                                                     |
          Use Google's JS lib to initiate ------------------> Google's JS lib makes auth request
                  OAuth process                                           to Google
                        |                                                     |
                        |                                     Google displays confirmation screen
                        |                                       to user in their popup window
                        |                                                     |
                        |                                                User accepts
                        |                                                     |
        Google's JS lib invokes a CB in  <------------------------ Popup window closes
                React/Redux app                                               |
                        |                                                     |
        CB provided with 'authorization'                                      |
        token and profile info for user                                       |
                        |                                                     |


SETTING UP OAUTH
1. Create ne project at console.developers.google.com/
2. Set up OAuth confirmation screen
3. Generate an OAuth Client ID
4. Install Google's API library, initialize it with OAuth Client ID
5. Make sure library gets called any time user clicks on 'Login w/ Google' button
