REDUX ARCHITECTURE DESIGN
-Two possible ways to integrate Auth with Redux

FIRST: Leave GoogleAuth Component untouched
-Not following closely the conventions of Redux
-Therefore not common or best approach
-This will help the Component show the entire Google OAuth process from start to finish

                                                            GoogleAuth
                                                            Component
                                                                |
      Redux Store                Action Creator           onSignInClick()   ----------->
          |                            |                  onSignOutClick()  ------------|
      Auth State <------------------ signIn() <------------ onAuthChange()   <------ GAPI Auth2
           ^---------------------- signOut() <---------------|  ^
          |                                                     |
          |_____________________________________________________|
                        isSignedIn: true/false

1. GoogleAuth Component: onSignOutClick(), onSignInClick() and onAuthChange() methods
  a. Whenever onSignInClick() and onSignOutClick() are called, essentially access the GAPI Auth2 instance
  b. This will begin the signIn flow or signOut flow
2. GAPI Auth2 library will call onAuthChange() inside class/component
3. In order to integrate Redux into this flow, make sure anytime onAuthChange() is called, call appropriate
   Action Creators: signIn() or signOut()
  a. Action Creators will be called anytime the user successfully signs in/out
  b. These Action Creators will return an Action that will show up inside a new Reducer(AuthReducer)
4. AuthReducer will, probably be an object, that will hold a simple boolean value, reflecting whether user
   is signed in/out

-Why reflect whether user is signed in/out in Redux Store when it's already recorded inside GoogleAuth comp
-Simple: currently only GoogleAuth component knows user auth status
  -This makes it difficult to use when other components will need to act based upon user auth status
  -Need to have the FACT of user auth status centrally located inside app
  -Having the status in GoogleAuth is not centrally available

-This will lead to some odd actions through, reflecting user auth status everywhere is not ideal
-Only reflect status in one part, in Redux Store
-The side effect is that GoogleAuth needs to show Google Sign In/Out button which is dependent on user auth
 status
-Need to make user Redux Store communicates auth status as a Prop through mapStateToProps() in GoogleAuth

-Currently GoogleAuth has component-level state
-Essentially this state will be taken and move it to Reducer then go through connect(), mapStateToProps()
 etc, just to get simple boolean back into component
 BASICALLY: REMOVE A PIECE OF DATA ALREADY IN COMPONENT INTO TO ANOTHER LOCATION THAT IS HARDER TO ACCESS
 JUST TO GET IT BACK INSIDE THE COMPONENT


SECOND: Spreads a lot of auth logic out all over Application
-Follows more closely to Redux conventions
-To reference GoogleAuth in future, it would be harder to figure out the entire flow
-Always want Action Creators responsible for changing State of Application (AC manage access to GAPI Auth2)

         _________________________________________________________
        |                                                         |
    Redux Store                 Action Creators                   |
        |                             |                      GoogleAuth
    Auth State   <------------   changeAuth()                 Component
                |---------------------^                           |
    GAPI Auth2 _|  <----------   trySignIn() <------------ onSignInClick()
        ^---------------------   trySignOut() <---------- onSignOutClick()

1. GoogleAuth Component: Still have callback functions
  a. Anytime one of the callbacks functions is invoked, an Action Creator would be called
  b. trySignIn(), trySignOut(), attempt to sign user in/out, beginning authentication process
2. Action Creators would call the GAPI Auth2 library
  a. With trySignIn()/trySignOUt() function called, GAPI will call a callback function
  b. changeAuth(), similar to onAuthChange()
3. changeAuth() would Dispatch an Action and update Auth State
4. Redux Store would communicate with GoogleAuth comp on whether user is signed in/out via mapStateToProps
