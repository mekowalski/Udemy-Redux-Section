-In previous application, all the reducers were created in a single reducers/index.js file

-This time, create a separate file for each Reducer needed
-As projects are larger, separating the reducers will help clarify purpose
eg:
  Action Creators
    fetchPosts    --->    Action
                      type: 'FETCH_POSTS'
                      payload: response     --->    Store
                                                  Reducers
                                                  postsReducer: Maintain array of all fetched posts

a. Action Creator will fetch the post
b. An Action will be dispatched with type: FETCH_POSTS and response on payload property
c. Create a postsReducer to watch for actions of FETCH_POSTS, pull off response & add it into an array


RULES OF REDUCERS
-Must return ANY value other than 'undefined'
eg: undefined will bring error message, should always have Return statement with Value
-Produces 'state' or data to be used inside the app using only previous state & action
eg: First time a reducer is called
  undefined           Action #1
      |_________|_________|
                |
             Reducer
                |
            State v1

  *When Redux app is first ran, each Reducer is automatically called one time(automatic invocation)
  *It will receive 2 arguments of undefined and an Action object
  *Reducer will take both arguments and return some state value

eg: Next time a reducer is called
  State v1            Action #2
      |_________|_________|
                |
             Reducer
                |
            State v2

  *The next time a reducer is called, the 1st argument is no longer equal to undefined
  *Instead it's what the Reducer returned the last time it was ran
  *1st argument = State v1, 1st argument != undefined

-Must NOT return reach 'out of itself' to decide what value to return(reducers are pure)
-Must NOT mutate its input 'state' argument
