-In previous application, all the reducers were created in a single reducers/index.js file

-This time, create a separate file for each Reducer needed
-As projects are larger, separating the reducers will help clarify purpose
eg:
  Action Creators
    fetchPosts    --->    Action
                      type: 'FETCH_POSTS'
                      payload: response     --->    Store
                                                  Reducers
                                                  postsReducer: Maintain array of all fetched posts

a. Action Creator will fetch the post
b. An Action will be dispatched with type: FETCH_POSTS and response on payload property
c. Create a postsReducer to watch for actions of FETCH_POSTS, pull off response & add it into an array


RULES OF REDUCERS
-Must return ANY value other than 'undefined'
eg: undefined will bring error message, should always have Return statement with Value

-Produces 'state' or data to be used inside the app using only previous state & action
eg: First time a reducer is called
  undefined           Action #1
      |_________|_________|
                |
             Reducer
                |
            State v1

  *When Redux app is first ran, each Reducer is automatically called one time(automatic invocation)
  *It will receive 2 arguments of undefined and an Action object
  *Reducer will take both arguments and return some state value

eg: Next time a reducer is called
  State v1            Action #2
      |_________|_________|
                |
             Reducer
                |
            State v2

  *The next time a reducer is called, the 1st argument is no longer equal to undefined
  *Instead it's what the Reducer returned the last time it was ran
  *1st argument = State v1, 1st argument != undefined
  *The only thing that really changes is the Action object(type & payload)

-Must NOT return reach 'out of itself' to decide what value to return(reducers are pure)
eg: Reducer called with Action and previous State value
  Previous State
      Data                Action
        |_________|_________|
                  |
               Reducer    ---BAD--->    API request
                  |
              New State

  *Not supposed to reach out of the Reducer function
  *NOT supposed to make an API request
  *Only supposed to look at previous state value and Action object to decide what to return
  eg: postsReducer BAD EXAMPLE
  export default () => {
    //bad1
    return document.querySelector('input')

    //bad2
    return axios.get('/posts')
  }

  eg: postsReducer GOOD EXAMPLE
  export default (state, action) => {
    return state + action
    //not actual correct code but return a combo value of state arg PLUS action arg
  }

-Must NOT mutate its input 'state' argument
  1. First argument in reducer is State, because it's the piece of state the reducer manages
  2. Extremely misleading and possibly wrong
  3. Mutate in the JS context eg:
  const colors = ['yellow', 'green']
  colors.length => 2
  colors.push('white') => 3
  colors => (3)Â ["yellow", "green", "white"]
  ***change content of array by adding, removing or changing the item in array

  -eg: Mutate an object
  const profile = {name: 'Malind'}
  profile => {name: 'Malind'}
  profile.name = 'Kristopher'
  profile => {name: 'Kristopher
  ***update value of property, add key-value pair or any time a key-value pair is removed

  eg: postsReducer BAD EXAMPLE
  export default (state, action) => {
    //BAD
    state[0] = 'Malind'
    state.pop()
    state.push()

    state.name = 'Ryan'
    state.age = 26
  }

  4. Inside JS, strings & numbers are immutable values, cannot change them in the same way as [] or {}
  -Don't need to worry about this mutation rule
  -Reducers most frequently return an array or object therefore mutation is present

*MISLEADING, POSSIBLY FALSE*
-Blog post, tutorials, even documentation that give the same statement
-Truth is: State argument can be mutated!!!
-Redux will never give an error when state is mutated
(state.push(), .pop(), .name = 'Malind', etc will not throw error)

-There is this rule for a reason
*ONE CASE WHERE MUTATING STATE ARGUMENT WILL LAND TROUBLE*
-Application will not work as expected

-Good practice to NEVER mutate state argument
-BTS of this rule to understand Redux
-Source code: https://github.com/reduxjs/redux => src => combineReducers.js => hasChanged variable
*Anytime an action is dispatched, hasChanged code will execute
1. hasChanged is a key variable that is defined
2. a For loop will iterate over all reducers in App
3. body of For loop, variable previousStateForKey will assign the last state value the reducer returned
4. variable nextStateForKey will actually invoke reducer and return new state value
5. Redux will check to see if the reducer has return a value of 'undefined'
6. If you get passed that check, hasChanged will take value of direct comparison for nextStateForKey and
   previousStateForKey
   (DO NOT MUTATE STATE RULE BOILS DOWN TO THIS RIGHT HERE)
