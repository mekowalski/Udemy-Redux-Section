React-Router has 3 different types of Routers available
-The differences are the part of URL they are looking at to decide what content to show on the screen

1. BrowserRouter: Uses everything after the TLD(top-level domain: .com, .net, etc) or port as the 'path'
eg: localhost:3000/pagetwo  (/pagetwo is used as path)

2. HashRouter: Uses everything after a # as the 'path'
eg: localhost:3000/#/pagetwo  (/#/pagetwo is used as path)
-This injects a # into the URL after the port, automatically
-Additionally, navigating to another page will still include /# then /pagetwo
-This is the main difference: just reflecting the part of the URL that RR cares about after #

3. MemoryRouter: Doesn't use the URL to track navigation
eg: localhost:3000/
-This doesn't update the path for the URL
-After a Link is clicked, only localhost:3000 is present
-Pressing Link 1 or Link 27 doesn't change URL whatsoever

WHY IS THIS IMPORTANT
-This comes down to deployment
-BrowserRouter is most complicated to deploy inside any realistic setting
-Deployment with BrowserRouter is fairly easy because a lot of 3rd deployment services understand something
 like BrowserRouter will be used, therefore they will help take care of that

What happens when making a request IF localhost:3000 is a TRADITIONAL SERVER (Java, Ruby, Python servers)
1. Browser makes request to back-end server
2. Back-end server would have logic inside of it to look at route where request is made for
3a. Do I have route for /pageone
3b. Yes, I am supposed to generate some HTML to send back
3c. Respond with HTML document
4. Server sends back the HTML document
5. Content is displayed on the screen


What happens if the traditional server doesn't have a route defined
1. Browser makes request to back-end server
2a. Do I have a route for /pageone
2b. NO
2c. Respond with a 404
3. Server doesn't know where/what that route is and returns a 404 error(not found error)

*refer to streams-app/streams-client/src/components/App.js for different examples*
