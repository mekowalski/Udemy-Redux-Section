REDUX FORMS
-A bit notorious
  1. Many developers believe it's challenging to understand
  2. Though it does a ton of stuff automatically, making programming a bit easier,
     compared to putting all the different forms together by hand & integrate Redux

-Current project(streams-app) has used Class Components which has used component-level State
-This cycle went on and on and over again
***Handling inputs without Redux***
  1. State object recorded current value of an element
  2. That value was taken out and pushed into the input element inside DOM(tell input what its value was)
  3. Whenever a user changed that text, onChange CB was called
  4. onChange CB would called setState method and update component-level State

-Once Redux is used, the component-level approach will change slightly
-With Redux, all data should be held inside Redux Store, therefore Components will no longer hold State
-Any time a user changes an element, call an Action Creator to change the data inside Redux Store


REDUX FORM AUTOMATION
-Handling inputs with Redux Form
-RF does a lot of the input handling because it is very repetitive
-RF will be wired up to a Reducer, not written, this is included in Redux library
-That included Reducer will be wired up to the Store
-Won't write any mapStateToProps(), RF will automatically do this
-Action Creators won;t be written either, RF will automatically do this
***RF = redux form***

  REDUX STORE                             COMPONENT                       DOM    ___________
   Redux ------> RF mapStateToProps --->    Props   ------------------>  value   | Input   |
    Form                                                                         | Element |
  Reducer <------ RF Action Creator <---   Handler  <------------------ onChange |_________|
  |--------- RF does this automatically ---------|

  1. May have input element on far right-hand side, which is assigned: value & onChange handler
  2. A Reducer will hold all State of different forms within application (value, dropdown select, etc)
  3. In order to get date from Store into DOM input element, have mapStateToProps
  4. That Props object with all its different values and pass them into DOM input elements as values
  5. Any time a user makes change to an element, have CB handler inside Component
  6. The CB handler will call an Action Creator and try to update the Form Data within Store

-Main thing to do is get some Form information, down into an input element
-And make sure that input element knows that it needs to call a CB handler anytime it gets changed
-This is still all making use of Redux system, but done all automatically via RF
