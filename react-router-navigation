-Current navigation of routes in an application is to manually change the route in the address bar
eg: myapp.co/pageone => myapp.co/pagetwo

-Traditional App with just HTML pages, an anchor tag may be used to navigate between pages
eg: App Component
const PageOne = () => {
  return (
    <div>
      Page One
      <a href='/pagetwo'>Click for Page2</a>
    </div>
  )
}

const PageTwo = () => {
  return (
    <div>
      Page Two
      <a href='/pageone'>Click for Page1</a>
    </div>
  )
}

*this will create a link to the respective URLs and would work in the application*


-Unfortunately, even though this works well, this is not the practice for navigating React-Router pages
-Do not use anchor tags with RR
BAD NAVIGATION(normal operation of anchor tag)
1. <a /> tag is added to application with href='/pagetwo' and is clicked
2. browser makes request to localhost:3000
3. development server responds with index.html file(the same one inside the public DIR)
4. THIS IS THE BAD PART: browser receives index.html file, dumps old HTML file it was showing(including all
  the React/Redux state data!!!)
5. index.html file lists JS files in script tags: browser downloads and executes theses scripts
6. the app starts up

-Every time <a /> is clicked, a new request is made for that document, every time that document is needed
-There isn't any saving of the data needed

-In addition to BrowserRouter and Route, pull in Link from react-router-dom
-Link: React component used in place of any anchor tag
-Replace <a /> with <Link />
-Replace href='' with to=''
-When clicked, this Link will take the user `to` that route
-When links are clicked, the application doesn't reload, along with no requests being made

eg: App Component
return (
  <div>
    Page One
    <Link to='/pagetwo'>Click Page2</Link>
  </div>
  )
}

const PageTwo = () => {
return (
  <div>
    Page Two
    <Link to='/pageone'>Click Page1</Link>
  </div>
  )
}

-What's interesting is when the Link is inspected with the Element tag, it will show up as an <a /> tag!!!
-When Link is used, an anchor component is still shown
LINK NAVIGATION
1. user navigates to another page in application
2. user clicks on a 'Link' tag
3. React Router prevents the browser from navigating to the new page & fetching the new index.html file
4. URL still CHALLENGES
5. 'History' sees the updated URL, take URL and sends it to BrowserRouter
6. BrowserRouter communicates the URL to Route components
7. Route components re-render to show new set of components

-Step 3 is most important for why Link is used
-When Link is used, an anchor element is still used
-BUT RR will detect a click on the anchor tag and override the default behavior
-This keeps the browser from navgivation away
-No React/Redux data will be dumped

-This ideal of Not Making an Additional Request for a Separate HTML Document when a Link is Clicked is
 known as Single Page App(SPA) comes from
-SPA: allows loading a single document while navigating to a different page
