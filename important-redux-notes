Overall Idea of How Redux Library Works

REDUX CYCLE
-To change the State/Data of app, call on Action Creator
1. Action Creator: Produces an Action object
2. Action: Describes exactly how to change Data inside application. Gets fed to Dispatch
3. Dispatch: Makes copies of Action object then forwards the Action to Reducers
4. Reducers: Process Actions, modify Data then creates new State
5. State: Data will be formed into new State object. Will wait until it needs to be updated again


COMBINEREDUCERS CALL
-Different Reducers put together are all simple functions
-Functions need to be wired together
-Making use of combineReducers wire up the Reducers altogether
-When using specific key names of the Reducer names, there ends up being a State object
-Convention to name the keys and reducers to the same names
-These key names are the property of the State object


DISPATCH
-Each Dispatch that is called (store.dispatch()) runs a whole Redux Cycle
-Can still modify the State object after running .dispatch with store.getState()
-At any point, Store can pull out State and read the current Data for app
-Only modify State object through use of Dispatch functions, Action Creators and Actions
-NO way to reach into Store and modify State manually(NO DIRECT ACCESS TO STORE)
eg: store.state.accounting - 30 (NOT GOING TO HAPPEN)


WHY IS THIS THE SETUP?
-Traditional App, as it gets bigger, the code written is more complex and harder to understand

-With Redux, there is a bit of a steady curve for growing complexity
-Initial complexity is higher with Redux
-But because Data can only be changed through Action Creators, then app self-documents
-Other developers looking/using/modifying code will already see what Actions are available
-Only want to have a small set of ways to modify the app's Data
