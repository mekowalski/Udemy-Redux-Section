Why go through extra work of passing it to connect() instead of calling it in the Component

REDUX IS NOT MAGIC
-Redux does NOT automatically detect action creators being called
-Redux does NOT automatically detect a function returning an object that is an 'action'

-The Action Creator does not wire itself to Redux, it doesn't register with Redux
-When the Action Creator is imported within the Component, what is imported is a regular, plain JS function
-Action Creator can be called inside the Component but it will be treated as a normal JS function call
-That JS function will return an object that will not magically get forwarded to Redux
-Redux does NOT detect that a function is arbitrarily being called an Action Creator

-To make sure an Action makes its way to the Reducers, NEED to call the dispatch function
-This will return an Action object, directly passed to the store.dispatch function
eg: store.dispatch(createPolicy('Kristopher', 60));

-None of these function calls will update the Redux Store
-They return Actions but they never got sent to Redux and never ended up inside the Reducers
createPolicy('Kristopher', 60)
createClaim('Kristopher', 45)
deletePolicy('Kristopher')

***In order for an Action Creator to update the State, take the returned Action & send it to dispatch()***


HOW CONNECT WORKS WITH ACTION CREATOR
*All behind the scenes*
1. When Action Creator is passed to the connect()
2. connect() does a special operation inside the object
3. It looks at all the functions included in the object and wraps it inside another JS function
4. When that new JS function is called
5. connect() automatically calls the Action Creators
6. connect() automatically takes that Action that is returned
7. connect() automatically calls the dispatch()

***Any time an Action Creator is called from a Component, always pass it to the connect()***
