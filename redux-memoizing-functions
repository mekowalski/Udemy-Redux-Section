HELPER FUNCTION
Lodash Library: Utility JS library with a ton of functions built-in that make J a bit simpler to write

MEMOIZE FUNCTION
-When memoize is used on a function, the original function only runs 1 time
-The function will run again with a new argument called on it but again will not run a 2nd time

-This is helpful for calling an Action Creator with a unique ID, 1 time


ONE TIME MEMOIZATION
-Define function outside Action Creator
-This function will make the request
-It will also Dispatch the Action
-Memoize all of this OUTSIDE the Action Creator
eg: actions/index.js
  1. Define function outside Action Creator with underscore
  2. Underscore indicated this is a private function(to help signal other engineers not to mess with this
     function unless they know what they're doing)
  3. Cut and copy the Request and Dispatch() from within Action Creator
  4. Memoize the function by wrapping in memoize call
  const _fetchUser = _.memoize(() => {
    const response = await jsonPlaceholder.get(`/users/${id}`)

    dispatch({ type: 'FETCH_USER', payload: response.data })
  })

  5. Make sure to call this memoized version within Action Creator
  eg:
  export const fetchUser = id => {
    return async dispatch => {
      _fetchUser()
    }
  }


-This almost works
- _fetchUser needs to get the id for fetched user
- Also needs to reference the dispatch()
- These 2 arguments need to be passed in _fetchUser
eg: Pass both arguments in _fetchUser within the Action Creator
  export const fetchUser = id => dispatch => {
    _fetchUser(id, dispatch)
  }

eg: Memoize function will receive the 2 arguments
const _fetchUser = _.memoize(asynce (id, dispatch) => {
  const response = await jsonPlaceholder.get(`/users/${id}`)

  dispatch({ type: 'FETCH_USER', payload: response.data })
})
